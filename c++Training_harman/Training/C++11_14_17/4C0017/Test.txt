#include<iostream>
using namespace std;

template<unsigned n>
struct Fibonacci {
	static const unsigned value = Fibonacci<n - 1>::value + Fibonacci<n - 2>::value;
};

template<>
struct Fibonacci<0> {
	static const unsigned value = 0;
};

template<>
struct Fibonacci<1> {
	static const unsigned value = 1;
};

int main1() {
	
	cout << Fibonacci<5>::value << endl;

		return 0;
}

constexpr unsigned fibonacci1(const unsigned x) {
	return x <= 1 ?
		1 :
		fibonacci1(x - 1) + fibonacci1(x - 2);
}
template<typename T,int size>
class CA
{
	T arr[size];
public:
	T val()
	{
		return size;
	}

};

void main12() {
	CA<int,fibonacci1(2)> obj;
	cout << obj.val() << endl;
}